<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>_LT_zyc</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-09T08:28:07.456Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_LT_zyc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Survey on Dialogue Systems:Recent Advances and New Frontiers</title>
    <link href="http://yoursite.com/2018/01/15/survey-on-dialogue-system/"/>
    <id>http://yoursite.com/2018/01/15/survey-on-dialogue-system/</id>
    <published>2018-01-15T21:04:17.000Z</published>
    <updated>2018-06-09T08:28:07.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="generative"><a href="#generative" class="headerlink" title="generative"></a>generative</h2><p>more proper, never appeared<br><a href="https://arxiv.org/abs/1503.02364" target="_blank" rel="noopener">Neural Responding Machine for Short-Text Conversation</a><br><a href="https://arxiv.org/abs/1506.05869" target="_blank" rel="noopener">A Neural Conversational Model</a></p><h4 id="dialogue-context"><a href="#dialogue-context" class="headerlink" title="dialogue context"></a>dialogue context</h4><p><a href="http://www.aclweb.org/anthology/P17-2036" target="_blank" rel="noopener">How to make context more useful? an em-pirical study on context-aware neural conversationalmodels</a></p><h4 id="response-diversity"><a href="#response-diversity" class="headerlink" title="response diversity"></a>response diversity</h4><p>PaperWeekly 第十八期 — 提高seq2seq方法所生成对话的流畅度和多样性</p><h5 id="objective-function"><a href="#objective-function" class="headerlink" title="objective function"></a>objective function</h5><p><a href="https://arxiv.org/pdf/1510.03055.pdf" target="_blank" rel="noopener">A Diversity-Promoting Objective Function for Neural Conversation Models</a><br> <a href="https://arxiv.org/abs/1606.01292" target="_blank" rel="noopener">An atten-tional neural conversation model with improved specificity</a></p><h5 id="beam-search"><a href="#beam-search" class="headerlink" title="beam search"></a>beam search</h5><p> Batra. Diversebeam search:  Decoding diverse solutions from neural sequence models<br> Generating long and diverse responseswith  neural  conversation  models<br> A simple, fast di-verse decoding algorithm for neural generation</p><h5 id="rerank"><a href="#rerank" class="headerlink" title="rerank"></a>rerank</h5><p>Adiversity-promoting objective function for neural con-versation models<br>A neural network approach to context-sensitive generation of conversational response</p><h5 id="latent-variable"><a href="#latent-variable" class="headerlink" title="latent variable"></a>latent variable</h5><p>latent variable is designed to make high-level decisions like topic or sentiment</p><h4 id="topics-and-personalities"><a href="#topics-and-personalities" class="headerlink" title="topics and personalities"></a>topics and personalities</h4><p>TODO</p><h4 id="outside-knowledge-base"><a href="#outside-knowledge-base" class="headerlink" title="outside knowledge base"></a>outside knowledge base</h4><p>TODO</p><h4 id="interactive-learning"><a href="#interactive-learning" class="headerlink" title="interactive learning"></a>interactive learning</h4><p>TODO</p><h4 id="evaluation"><a href="#evaluation" class="headerlink" title="evaluation"></a>evaluation</h4><p>another deep learning model<br>TODO</p><h2 id="retrieval"><a href="#retrieval" class="headerlink" title="retrieval"></a>retrieval</h2><p>informative, fluent<br><a href="https://arxiv.org/pdf/1408.6988.pdf" target="_blank" rel="noopener">an information retrieval approach to short text conversation</a></p><h4 id="single-turn-Response-Matching"><a href="#single-turn-Response-Matching" class="headerlink" title="single-turn Response Matching"></a>single-turn Response Matching</h4><h4 id="multi-turn-Response-Matching"><a href="#multi-turn-Response-Matching" class="headerlink" title="multi-turn Response Matching"></a>multi-turn Response Matching</h4><h2 id="hybrid"><a href="#hybrid" class="headerlink" title="hybrid"></a>hybrid</h2><p>A se-quence to sequence and rerank based chatbot engine<br>an ensemble of retrieval-and generation-based dialog systems</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;generative&quot;&gt;&lt;a href=&quot;#generative&quot; class=&quot;headerlink&quot; title=&quot;generative&quot;&gt;&lt;/a&gt;generative&lt;/h2&gt;&lt;p&gt;more proper, never appeared&lt;br&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="dialogue," scheme="http://yoursite.com/tags/dialogue/"/>
    
  </entry>
  
  <entry>
    <title>SSIST by-talk day3</title>
    <link href="http://yoursite.com/2017/06/15/SSIST-day3/"/>
    <id>http://yoursite.com/2017/06/15/SSIST-day3/</id>
    <published>2017-06-15T20:04:23.000Z</published>
    <updated>2018-06-09T08:21:57.799Z</updated>
    
    <content type="html"><![CDATA[<p>There is a idea appears in my mind… to attend a PHD program in ShanghaiTech</p><p>Malik and Girod … big bosses’ talk are always too big for me.</p><p>tieyan liu<br>distributed deep learning<br>data partition<br>local shuffling vs global shuffling<br>sampling != shuffling</p><p>aggregation<br>deep learning process is not convex<br>loss function is convex</p><p>yuandong tian<br>ELF extensive, lightweight and flexible framework for game research</p><p>xilin chen<br>dual purpose hash</p><p>chenglin liu<br>document image analysis (DIA)</p><p>ming zhou<br>NMT (tree LSTM)<br>tree to sequence<br>sequence to tree </p><p>knowledge based semantic embedding</p><p>topic aware IR model<br>topic aware neural generative model</p><p>MLP</p><p>multi_column CNN<br>real time translation</p><p>hard EM<br>softmax EM<br>CRF autoencoder</p><p>Good sleep == concentration on interesting topic<br>Campus life is wonderful but somehow depressive</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There is a idea appears in my mind… to attend a PHD program in ShanghaiTech&lt;/p&gt;
&lt;p&gt;Malik and Girod … big bosses’ talk are always too big 
      
    
    </summary>
    
    
      <category term="ssist, conference" scheme="http://yoursite.com/tags/ssist-conference/"/>
    
  </entry>
  
  <entry>
    <title>SSIST by-talk day2</title>
    <link href="http://yoursite.com/2017/06/15/SSIST-day2/"/>
    <id>http://yoursite.com/2017/06/15/SSIST-day2/</id>
    <published>2017-06-15T20:04:21.000Z</published>
    <updated>2018-06-09T08:21:47.983Z</updated>
    
    <content type="html"><![CDATA[<p>keynote talks<br>Yann Lecun and Harry Shum depict a grand road map of AI.<br>Speaking speed of Lecun is 3x faster than normal people. fail to take and understand most part of his talk. The talk focused on CNN related project.<br>keyword:<br>Mask R-CNN instance segmentation<br>ConvSeq2Seq for traslation<br>FAIR<br>memory network<br>stacked-augmented<br>neural turing network<br>differentiable memory<br>Harry Shum’s talk use XiaoIce as the example to depict the AI’s feature and MSRA’s work.</p><p>Computer vision topic<br>Some application in computer vision. There is no impressive talk.<br>keyword<br>pre-train use ImageNet<br>fine-tuning<br>gabor filter band<br>FC layer<br>Alex net</p><p>Security topic<br>Dawn Song is the distinguished scientist in Secure deep learning. List many aspect that hackers can use in deep learning model and application. Deep learning’s secure should start to be considered.<br>Other three’s talk isn’t suitable for me. very boring</p><p>optimization topic<br>Mathematics + English + BriefTalk = Though I know the word he talk, can’t understand any of them.</p><p>Conclusion<br>Math related topic need a detailed preview !!!<br>Most irrelevant application talking has nothing to do with you…<br>Stay in RUJIA by myself….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;keynote talks&lt;br&gt;Yann Lecun and Harry Shum depict a grand road map of AI.&lt;br&gt;Speaking speed of Lecun is 3x faster than normal people. fai
      
    
    </summary>
    
    
      <category term="ssist,conference" scheme="http://yoursite.com/tags/ssist-conference/"/>
    
  </entry>
  
  <entry>
    <title>SSIST by-talk day1</title>
    <link href="http://yoursite.com/2017/06/15/SSIST-day1/"/>
    <id>http://yoursite.com/2017/06/15/SSIST-day1/</id>
    <published>2017-06-15T20:04:17.000Z</published>
    <updated>2018-06-09T08:20:44.771Z</updated>
    
    <content type="html"><![CDATA[<p>The first impression of ShanghaiTech University is different from other universities I’ve visited.</p><p>Cheetah mobile AI Lab<br>Speaker is a young man who quit UIUC PHD conducted by MaYi and made a startup evalued as almost 200 million yuan.</p><p>AI in product news republic for understanding content<br>500 thousand articles<br>Convert content to 512 dimension vector representation by DNN plus TF-IDF and other basic vectors<br>Use LSH to find the similar articles.<br>LSH can’t leverage the data distribution and all article is treated as the same<br>CVRP 2016 deepbit</p><p>HUAWEI<br>Speaker Hua.Huang director of Mobile Broadband Network Research Department.<br>Introduce the reinforcement learning (Q-learning)in network traffic optimization.</p><p>360<br>Speaker Shuicheng Yan, 360VP,<br>Two target of AI<br>Pursue extreme score (Research)<br>pursue extreme user-experience (Industry)</p><p>Dual-path network<br>Residual network + densely connected network</p><p>Apply AI model need to concern memory, time performance and computation ability.<br>Add a 1<em>1 convolution layer to multiply the normal n</em>n  layer to select features. RELU only use 60%, others are almost 0 value, no effec on the next layer<br>Also adjust the model complexity can work</p><p>sensetime<br>Li Xu CEO of sense time.<br>A funny person. </p><p>panel<br>Extraordinary candidates<br>confident and try<br>own different opinion and view<br>insist his own view<br>do something extreme in some aspect<br>willing to learn</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The first impression of ShanghaiTech University is different from other universities I’ve visited.&lt;/p&gt;
&lt;p&gt;Cheetah mobile AI Lab&lt;br&gt;Speake
      
    
    </summary>
    
    
      <category term="ssist,conference" scheme="http://yoursite.com/tags/ssist-conference/"/>
    
  </entry>
  
  <entry>
    <title>Finding similar articles</title>
    <link href="http://yoursite.com/2017/04/15/Finding-similar-articles/"/>
    <id>http://yoursite.com/2017/04/15/Finding-similar-articles/</id>
    <published>2017-04-15T19:47:06.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>Due to the demand of removing similar articles in Touchpal Dialer’s feeds, I did some research on related algorithms and realized a few of them.<br>I will tell about three of them in this article.</p><ul><li>The well-known simhash[<a href="https://en.wikipedia.org/wiki/SimHash]" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/SimHash]</a>, </li><li>minhash[<a href="https://en.wikipedia.org/wiki/MinHash]" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/MinHash]</a></li><li>lshforest[<a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LSHForest.html]" target="_blank" rel="noopener">http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LSHForest.html]</a></li></ul><h3 id="simhash"><a href="#simhash" class="headerlink" title="simhash"></a>simhash</h3><p>Simhash is a wellknown algorithm which is applyied by Google in its similar webpage detection.</p><h3 id="minhash"><a href="#minhash" class="headerlink" title="minhash"></a>minhash</h3><p>pass</p><h3 id="LSHForest"><a href="#LSHForest" class="headerlink" title="LSHForest"></a>LSHForest</h3><p>The first time I saw this name is when I was browsing the guideline of sklearn. </p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p>[]<br>[]<br>[]<br>[]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Due to the demand of removing similar articles in Touchpal Dialer’s feeds, I did some research on related algorithms and realized a few o
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>hdu 4456 crowd</title>
    <link href="http://yoursite.com/2013/09/03/hdu-4456-crowd/"/>
    <id>http://yoursite.com/2013/09/03/hdu-4456-crowd/</id>
    <published>2013-09-04T01:29:00.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>去年区域赛留下来的遗憾题之一。</p><p>此题要考的是坐标转换后的二维树状数组，难点在于内存开不下，需要20000**20000，现场赛胆大的直接开了这么大就过了，向我们这种胆小的就直接被吓傻了。</p><p>hdu上内存32768K。</p><p>由树状数组的性质可知每次最多只会更新log(n)次，因此二维树状数组总共会更新m <em> log(n)</em>log(n)个地方，所以想办法存这些值就可以了，map会超时，搞个靠谱点的hash就可以了。</p><p>另一种解法估计就是出题人想考的，第一维照样用树状数组，第二维再套个平衡树来维护在这个范围内的区间和。</p><p>第二种解法代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key[N],sz[N],lc[N],rc[N],w[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    key[i] = sz[i] = lc[i] = rc[i] = w[i] = sum[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sbtree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        newnode(++num);</span><br><span class="line">        root = num;</span><br><span class="line">        sz[root] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> val,<span class="keyword">int</span> ww)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = ++num;</span><br><span class="line">            lc[root] = rc[root] = <span class="number">0</span>;</span><br><span class="line">            sz[root] = <span class="number">1</span>;</span><br><span class="line">            key[root] = val;</span><br><span class="line">            w[root] = ww;</span><br><span class="line">            sum[root] = ww;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[root] += ww;</span><br><span class="line">        sz[root] ++;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; key[root])</span><br><span class="line">        &#123;</span><br><span class="line">            Insert(lc[root] , val , ww);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Insert(rc[root] , val , ww);</span><br><span class="line">        &#125;</span><br><span class="line">        maintain(root , !(val &lt; key[root]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = root;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key[tmp] &lt;= val)&#123;</span><br><span class="line">                ans += sum[lc[tmp]] + w[tmp];</span><br><span class="line">                tmp = rc[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp = lc[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LeftRotate</span><span class="params">(<span class="keyword">int</span> &amp;root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = rc[root];</span><br><span class="line">        rc[root] = lc[temp];</span><br><span class="line">        lc[temp] = root;</span><br><span class="line">        sz[temp] = sz[root];</span><br><span class="line">        sum[temp] = sum[root];</span><br><span class="line">        sz[root] = <span class="number">1</span> + sz[lc[root]] + sz[rc[root]];</span><br><span class="line">        sum[root] = sum[lc[root]] + sum[rc[root]] + w[root];</span><br><span class="line">        root = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RightRotate</span><span class="params">(<span class="keyword">int</span> &amp;root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = lc[root];</span><br><span class="line">        lc[root] = rc[temp];</span><br><span class="line">        rc[temp] = root;</span><br><span class="line">        sz[temp] = sz[root];</span><br><span class="line">        sum[temp] = sum[root];</span><br><span class="line">        sz[root] = <span class="number">1</span> + sz[lc[root]] + sz[rc[root]];</span><br><span class="line">        sum[root] = sum[lc[root]] + sum[rc[root]] + w[root];</span><br><span class="line">        root = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> &amp;root , <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( !flag )   <span class="comment">// 调整左子树</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( sz[lc[lc[root]]] &gt; sz[rc[root]] )</span><br><span class="line">            &#123;</span><br><span class="line">                RightRotate( root );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( sz[rc[lc[root]]] &gt; sz[rc[root]] )</span><br><span class="line">            &#123;</span><br><span class="line">                LeftRotate( lc[root] );</span><br><span class="line">                RightRotate( root );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>     <span class="comment">// 调整右子树</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( sz[rc[rc[root]]] &gt; sz[lc[root]] )</span><br><span class="line">            &#123;</span><br><span class="line">                LeftRotate( root );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( sz[lc[rc[root]]] &gt; sz[lc[root]] )</span><br><span class="line">            &#123;</span><br><span class="line">                RightRotate( rc[root] );</span><br><span class="line">                LeftRotate( root );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maintain(lc[root] , <span class="literal">false</span>);</span><br><span class="line">        maintain(rc[root] , <span class="literal">true</span>);</span><br><span class="line">        maintain(root , <span class="literal">false</span>);</span><br><span class="line">        maintain(root , <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; sbt[<span class="number">30000</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ch</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nx = n+x-y;</span><br><span class="line">    <span class="keyword">int</span> ny = x+y<span class="number">-1</span>;</span><br><span class="line">    x = nx;</span><br><span class="line">    y = ny;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initval</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">2</span>*n; i++)</span><br><span class="line">        sbt[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=<span class="number">2</span>*n; i+=lb(i))</span><br><span class="line">        sbt[i].Insert(sbt[i].root,y,z);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y1,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&gt;<span class="number">0</span>; i-=lb(i))</span><br><span class="line">        ans += sbt[i].query(y2) - sbt[i].query(y1);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        initval();</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> type,x,y,z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;type,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            <span class="keyword">if</span>(type==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ch(x,y);</span><br><span class="line">                add(x,y,z);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">                a = x - z;</span><br><span class="line">                b = y;</span><br><span class="line">                c = x + z;</span><br><span class="line">                d = y;</span><br><span class="line">                ch(a,b);</span><br><span class="line">                ch(c,d);</span><br><span class="line"></span><br><span class="line">                a = max(<span class="number">1</span>,a);</span><br><span class="line">                c = min(<span class="number">2</span>*n,c);</span><br><span class="line"></span><br><span class="line">                a--;</span><br><span class="line">                b--;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,get(c,b,d) - get(a,b,d) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;去年区域赛留下来的遗憾题之一。&lt;/p&gt;
&lt;p&gt;此题要考的是坐标转换后的二维树状数组，难点在于内存开不下，需要20000**20000，现场赛胆大的直接开了这么大就过了，向我们这种胆小的就直接被吓傻了。&lt;/p&gt;
&lt;p&gt;hdu上内存32768K。&lt;/p&gt;
&lt;p&gt;由树状数组的性质
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>CF 338E Optimize!</title>
    <link href="http://yoursite.com/2013/08/18/CF-338E-Optimize/"/>
    <id>http://yoursite.com/2013/08/18/CF-338E-Optimize/</id>
    <published>2013-08-19T00:33:24.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：给一个串a,长度为n，一个串b长度为len, 问a有多少个长度为len的子串满足：和b任意匹配后，每一对值的和都大于等于h。</p><p>把b从大到小排序，对a里面的元素求出和b[i]相加大于等于h的最大的i , 这样b[1]~b[i]都满足和当前a里的元素相加大于等于h。<br>然后分别求出a中每一段长度为len的子串里：有多少要和b[1],b[2],……,b[len]之前匹配，记为c[i]，如果存在一个c[i] &gt; i那显然这个子串无法满足了。<br>那么我们从左往右扫一遍，用线段树来维护，一开始每一个点先减去i,然后扫描中把c[i]加上去，如果线段树最大值比0大，那就表示这个串不满足。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker, "/STACK:65536000")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y)(x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y)(x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200000</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="keyword">int</span> n,m,h;</span><br><span class="line"><span class="keyword">int</span> ma[<span class="number">4</span>*N],add[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    add[x+x] += add[x];</span><br><span class="line">    add[x+x+<span class="number">1</span>] += add[x];</span><br><span class="line">    add[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    ma[x] = max(ma[x+x]+add[x+x],ma[x+x+<span class="number">1</span>]+add[x+x+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> tl,<span class="keyword">int</span> tr,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;tr || r&lt;tl) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tl &amp;&amp; r&gt;=tr)&#123;</span><br><span class="line">        add[x] += v;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(x);</span><br><span class="line">    <span class="keyword">int</span> mid = (tr+tl)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    insert(x*<span class="number">2</span>,l,r,tl,mid,v);</span><br><span class="line">    insert(x*<span class="number">2</span>+<span class="number">1</span>,l,r,mid+<span class="number">1</span>,tr,v);</span><br><span class="line"></span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,b+i);</span><br><span class="line">    sort(b+<span class="number">1</span>,b+m+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = m+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r!=l)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(b[mid] + tmp &gt;=h) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        l--;</span><br><span class="line">        a[i] = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) insert(<span class="number">1</span>,i,i,<span class="number">0</span>,m,-i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) insert(<span class="number">1</span>,a[i],m,<span class="number">0</span>,m,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((ma[<span class="number">1</span>] + add[<span class="number">1</span>])&lt;=<span class="number">0</span>) ans++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i!=n)&#123;</span><br><span class="line">            insert(<span class="number">1</span>,a[i-m+<span class="number">1</span>],m,<span class="number">0</span>,m,<span class="number">-1</span>);</span><br><span class="line">            insert(<span class="number">1</span>,a[i+<span class="number">1</span>],m,<span class="number">0</span>,m,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：给一个串a,长度为n，一个串b长度为len, 问a有多少个长度为len的子串满足：和b任意匹配后，每一对值的和都大于等于h。&lt;/p&gt;
&lt;p&gt;把b从大到小排序，对a里面的元素求出和b[i]相加大于等于h的最大的i , 这样b[1]~b[i]都满足和当前a里的元素相加大于
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title> 两题类似的数位DP</title>
    <link href="http://yoursite.com/2013/08/17/%E4%B8%A4%E9%A2%98%E7%B1%BB%E4%BC%BC%E7%9A%84%E6%95%B0%E4%BD%8DDP/"/>
    <id>http://yoursite.com/2013/08/17/两题类似的数位DP/</id>
    <published>2013-08-18T01:07:34.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>CF 331C3 - The Great Julya Calendar (60 points)<br>SGU 390 TICKETS<br>dfs写法的数位dp最牛的地方是:只要考虑状态怎么变，边界情况搞搞好然后就能AC。<br>这两题都是一段区间会对下一段区间有影响的数位DP，这个影响就用pair来记录，其他无脑写。</p><p>CF 331C3<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:65536000"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC(x,y) &#123;x+=y;<span class="meta-keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x,y) &#123;<span class="meta-keyword">if</span>(y&gt;x) x=y;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Min(x,y) &#123;<span class="meta-keyword">if</span>(y&lt;x) x=y;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;ll,<span class="keyword">int</span>&gt; dp[<span class="number">20</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">20</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">ll l,r,k;</span><br><span class="line"><span class="keyword">int</span> dig[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">pair&lt;ll,<span class="keyword">int</span>&gt; dfs(<span class="keyword">int</span> pos,<span class="keyword">int</span> mx,<span class="keyword">int</span> rem,<span class="keyword">int</span> up)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx==<span class="number">0</span>) <span class="keyword">return</span> make_pair(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(rem&gt;<span class="number">0</span>) <span class="keyword">return</span> make_pair(<span class="number">0</span>,rem<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> make_pair(<span class="number">1</span>,mx<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!up &amp;&amp; vis[pos][mx][rem]) <span class="keyword">return</span> dp[pos][mx][rem];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">if</span>(up) t = dig[pos];</span><br><span class="line">    <span class="keyword">else</span> t = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    pair&lt;ll,<span class="keyword">int</span>&gt; ans = make_pair(<span class="number">0</span>,rem);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        pair&lt;ll,<span class="keyword">int</span>&gt; tmp = dfs(pos<span class="number">-1</span>,max(mx,i),ans.second, up&amp;&amp;t==i);</span><br><span class="line">        ans.first += tmp.first;</span><br><span class="line">        ans.second  = tmp.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!up)&#123;</span><br><span class="line">        vis[pos][mx][rem] = <span class="number">1</span>;</span><br><span class="line">        dp[pos][mx][rem] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll  <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l)&#123;</span><br><span class="line">        dig[p++] = l%<span class="number">10</span>;</span><br><span class="line">        l/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(p<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;calc()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SGU 390<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:65536000"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC(x,y) &#123;x+=y;<span class="meta-keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x,y) &#123;<span class="meta-keyword">if</span>(y&gt;x) x=y;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Min(x,y) &#123;<span class="meta-keyword">if</span>(y&lt;x) x=y;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;ll,<span class="keyword">int</span>&gt; dp[<span class="number">20</span>][<span class="number">200</span>][<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">20</span>][<span class="number">200</span>][<span class="number">1002</span>];</span><br><span class="line">ll l,r,k;</span><br><span class="line"><span class="keyword">int</span> digl[<span class="number">20</span>],digr[<span class="number">20</span>],p;</span><br><span class="line"></span><br><span class="line">pair&lt;ll,<span class="keyword">int</span>&gt; dfs(<span class="keyword">int</span> pos,<span class="keyword">int</span> sum,<span class="keyword">int</span> rem,<span class="keyword">int</span> down,<span class="keyword">int</span> up)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum + rem &gt;= k) <span class="keyword">return</span> make_pair(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> make_pair(<span class="number">0</span>,sum+rem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!down &amp;&amp; !up &amp;&amp; vis[pos][sum][rem]) <span class="keyword">return</span> dp[pos][sum][rem];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s,t;</span><br><span class="line">    <span class="keyword">if</span>(down) s = digl[pos];</span><br><span class="line">    <span class="keyword">else</span> s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(up) t = digr[pos];</span><br><span class="line">    <span class="keyword">else</span> t = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    pair&lt;ll,<span class="keyword">int</span>&gt; ans = make_pair(<span class="number">0</span>,rem);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++)&#123;</span><br><span class="line">        pair&lt;ll,<span class="keyword">int</span>&gt; tmp = dfs(pos<span class="number">-1</span>,sum+i,ans.second, down&amp;&amp;s==i, up&amp;&amp;t==i);</span><br><span class="line">        ans.first += tmp.first;</span><br><span class="line">        ans.second  = tmp.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!down &amp;&amp; !up)&#123;</span><br><span class="line">        vis[pos][sum][rem] = <span class="number">1</span>;</span><br><span class="line">        dp[pos][sum][rem] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll  <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l)&#123;</span><br><span class="line">        digl[p++] = l%<span class="number">10</span>;</span><br><span class="line">        l/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r)&#123;</span><br><span class="line">        digr[p++] = r %<span class="number">10</span>;</span><br><span class="line">        r/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(p<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;calc()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CF 331C3 - The Great Julya Calendar (60 points)&lt;br&gt;SGU 390 TICKETS&lt;br&gt;dfs写法的数位dp最牛的地方是:只要考虑状态怎么变，边界情况搞搞好然后就能AC。&lt;br&gt;这两题都是一段区间会对下一段区间有影响的数位
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4684 The Budget of Traveler</title>
    <link href="http://yoursite.com/2013/08/17/HDU-4684-The-Budget-of-Traveler/"/>
    <id>http://yoursite.com/2013/08/17/HDU-4684-The-Budget-of-Traveler/</id>
    <published>2013-08-17T14:43:43.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：在树上做斜率优化 （题意是不是太浓缩了= =）<br>以前感觉毫无想法，必须写下blog加深印象。<br>dp[i] = dp[j] + (sum[i]-sum[j])<em>p[i] + r[i]; 转移方程，其中j是i的祖先。<br>斜率优化要维护队头和队尾，在树上怎么搞呢？ 把树链想成队列，开个fa[]数组记录在每个节点在队列里的前一个元素，更新队尾只要把当前节点的fa设为设为相应的值，更新队头没有办法删除，只能采用三分得到实际应当成为队头的地方，正确性可以根据斜率优化的性质知道，队头不删，那队列中的g()值，也就是状态转移方程的值是先减后增的。<br>队尾维护时一个个父亲更新过去，最坏情况每个节点都要o(n)，因此也要三分，正确性也可以由斜率优化性质得到。（做完这题，又得重学斜率优化了）。<br>三分找第k个父亲采用树上倍增，所以总的复杂度是o(n</em>log(n)*log(n))<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:65536000"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC(x,y) &#123;x+=y;<span class="meta-keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x,y) &#123;<span class="meta-keyword">if</span>(y&gt;x) x=y;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Min(x,y) &#123;<span class="meta-keyword">if</span>(y&lt;x) x=y;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500000</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll f[N],p[N],r[N],sum[N],num[N],dp[N];</span><br><span class="line"><span class="keyword">int</span> fa[N][<span class="number">20</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f1</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dp[j] - dp[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f2</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[j] - sum[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">g</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dp[j] + (sum[i]-sum[j])*p[i] + r[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) u =  fa[u][c];</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>,right = num[father]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> fa0 = find(father,mid);</span><br><span class="line">        <span class="keyword">int</span> fa1 = fa[fa0][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(g(u,fa0)&gt;g(u,fa1)) left = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[u] = g(u,find(father,left));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFa</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>,right = num[father]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> f = find(father,mid);</span><br><span class="line">        <span class="keyword">int</span> ff = fa[f][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">double</span>)f1(ff,f)*f2(f,u)&gt;=(<span class="keyword">double</span>)f1(f,u)*f2(ff,f)) left = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find(father,left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span>&#123;</span><br><span class="line">    getMax(u,father);</span><br><span class="line">    <span class="keyword">int</span> tf = getFa(u,father);</span><br><span class="line">    fa[u][<span class="number">0</span>] = tf;</span><br><span class="line">    num[u] = num[tf]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=num[u]<span class="number">-1</span>;i++)</span><br><span class="line">        fa[u][i] = find(tf,(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[u].size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        sum[v] = sum[u] + f[v];</span><br><span class="line">        dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            e[i].clear();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>,&amp;f[i],&amp;p[i],&amp;r[i]);</span><br><span class="line"><span class="comment">//            scanf("%lld%lld%lld",&amp;f[i],&amp;p[i],&amp;r[i]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            e[u].push_back(v);</span><br><span class="line">            e[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        sum[<span class="number">1</span>] = f[<span class="number">1</span>];</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans += dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %I64d\n"</span>,++cas,ans);</span><br><span class="line"><span class="comment">//        printf("Case #%d: %lld\n",++cas,ans);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：在树上做斜率优化 （题意是不是太浓缩了= =）&lt;br&gt;以前感觉毫无想法，必须写下blog加深印象。&lt;br&gt;dp[i] = dp[j] + (sum[i]-sum[j])&lt;em&gt;p[i] + r[i]; 转移方程，其中j是i的祖先。&lt;br&gt;斜率优化要维护队头和队尾，在树
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>SRM 475 DIV1 900</title>
    <link href="http://yoursite.com/2013/08/12/SRM-475-DIV1-900/"/>
    <id>http://yoursite.com/2013/08/12/SRM-475-DIV1-900/</id>
    <published>2013-08-12T19:38:51.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：<br>一场考试。一些题目结果已经出来，对于j题每个人能知道自己是否做对，做对得到points[j]分，做错0分。<br>令一些结果还未出来的题目，对于j题知道每个人是否提交，提交了就有机会得到points[j]分，否则必然的到0分。<br>然后对于成绩排在前p的人中（分数相同按照id，id小的排前面），随机选择q个，问方案数。</p><p>给这DP跪，完全没思路，然后看了一眼别人的dp状态，yy乱搞，结果就过了，现在整理一下思路。</p><p>先得到每个人最多能得的分数ma[i]，和最少能得到的分数mi[i]，对于我们选择的q个人，我们都假设他们得到最高分,其他都得他们的最低分，这样就不会出现中间情况，总方案数也不会减少。<br>枚举每一个1~n，假设他是选择的q个人中得分最低的。然后DP<br>假设现在选择x<br>状态dp[i][j][k]表示前i人，有j个排名在x前面，选择了k个的方案，转移看代码。<br>因为每次选择的方案最后一个人都不同，所以枚举x不会出现重复。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> mi[N],ma[N];</span><br><span class="line">ll dp[N][N][N];</span><br><span class="line"><span class="keyword">int</span> n,p,q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitProgramming</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ll <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">            clr(dp,<span class="number">0</span>);</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=x)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(i&lt;x)&#123;  </span><br><span class="line">                                <span class="comment">//在x的前面的分数比ma[x]小于等于，排名就在他前面了，所以和i&gt;x分开讨论</span></span><br><span class="line">                                <span class="keyword">if</span>(mi[i] &lt; ma[x])</span><br><span class="line">                                    dp[i][j][k] += dp[i<span class="number">-1</span>][j][k]; </span><br><span class="line">                                        <span class="comment">//i不加入比x大的行列</span></span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>) dp[i][j][k] += dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k];</span><br><span class="line">                                        <span class="comment">//i必须加入比x大的行列</span></span><br><span class="line">                                <span class="keyword">if</span>(ma[i]&gt;=ma[x])</span><br><span class="line">                                    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>&amp;&amp;k&gt;=<span class="number">1</span>) dp[i][j][k] += dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>];</span><br><span class="line">                                        <span class="comment">//i被选择</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                <span class="keyword">if</span>(mi[i]&lt;=ma[x])</span><br><span class="line">                                    dp[i][j][k] += dp[i<span class="number">-1</span>][j][k];</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>) dp[i][j][k] += dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k];</span><br><span class="line">                                <span class="keyword">if</span>(ma[i]&gt;ma[x])</span><br><span class="line">                                    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>&amp;&amp;k&gt;=<span class="number">1</span>) dp[i][j][k] += dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">                            dp[i][j][k] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>];</span><br><span class="line">                    <span class="comment">//x必须被加入</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=p;i++)</span><br><span class="line">                ans += dp[n][i][q];</span><br><span class="line">            <span class="comment">//有小于等于p个在它前面的方案都可以加入答案,而且不会出现重复，</span></span><br><span class="line">            <span class="comment">//因为对于固定了选择q个，有不同个排在前面的选择其中的方案都不会相同。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getTeams</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; p, <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; s, <span class="keyword">int</span> qu, <span class="keyword">int</span> se)</span></span>&#123;</span><br><span class="line">        ::n = s.size();</span><br><span class="line">        ::p = qu;</span><br><span class="line">        ::q = se;</span><br><span class="line">        clr(mi,<span class="number">0</span>);clr(ma,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)p.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    <span class="keyword">if</span>(s[j][i]==<span class="string">'Y'</span>)</span><br><span class="line">                        mi[j+<span class="number">1</span>]+=p[i],ma[j+<span class="number">1</span>]+=p[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    <span class="keyword">if</span>(s[j][i]==<span class="string">'Y'</span>)</span><br><span class="line">                        ma[j+<span class="number">1</span>] += -p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> solve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Powered by FileEdit</span></span><br><span class="line"><span class="comment">// Powered by TZTester 1.01 [25-Feb-2003]</span></span><br><span class="line"><span class="comment">// Powered by CodeProcessor</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;br&gt;一场考试。一些题目结果已经出来，对于j题每个人能知道自己是否做对，做对得到points[j]分，做错0分。&lt;br&gt;令一些结果还未出来的题目，对于j题知道每个人是否提交，提交了就有机会得到points[j]分，否则必然的到0分。&lt;br&gt;然后对于成绩排在前p的人中
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>SRM 477 DIV1 1000</title>
    <link href="http://yoursite.com/2013/08/12/SRM-477-DIV1-1000/"/>
    <id>http://yoursite.com/2013/08/12/SRM-477-DIV1-1000/</id>
    <published>2013-08-12T19:02:59.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：给定一棵树，最多可给这棵树增加k条捷径，每条捷径长度为L，且只能走一次，问从0出发回到0遍历所有的边需要走的最短距离。</p><p>树型dp，状态为dp[i][j][2]。<br>dp[i][j][0]表示从i出发，用了j次捷径，遍历完下面所有边且最后走的路径到底后没有回来的最小距离。<br>dp[i][j][1]表示从i出发，用了j次捷径，遍历完下面所有边且回到i的最小距离。<br>转移看代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Min(x,y) <span class="meta-keyword">if</span>(y&lt;x) x=y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x,y) <span class="meta-keyword">if</span>(y&gt;x) x=y</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e8</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ev[<span class="number">205</span>],ew[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>][<span class="number">105</span>][<span class="number">2</span>],p[<span class="number">105</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> K,L;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KingdomTour</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++) dp[u][i][<span class="number">0</span>] = dp[u][i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ev[u].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = ev[u][i];</span><br><span class="line">            <span class="keyword">int</span> w = ew[u][i];</span><br><span class="line">            <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v,u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++) p[i][<span class="number">0</span>] = p[i][<span class="number">1</span>] = inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=K;j++)</span><br><span class="line">                    <span class="keyword">if</span>(i+j&lt;=K)&#123;</span><br><span class="line">                        Min(p[i+j+<span class="number">1</span>][<span class="number">0</span>],dp[u][i][<span class="number">0</span>]+dp[v][j][<span class="number">0</span>]+L+w);   </span><br><span class="line">                        <span class="comment">//之前有儿子节点不回来， v最后通过捷径回到u</span></span><br><span class="line">                        Min(p[i+j][<span class="number">0</span>],dp[u][i][<span class="number">0</span>]+dp[v][j][<span class="number">1</span>]+<span class="number">2</span>*w);     </span><br><span class="line">                        <span class="comment">//之前有儿子节点不回来， v直接走回到u</span></span><br><span class="line">                        Min(p[i+j][<span class="number">0</span>],dp[u][i][<span class="number">1</span>]+dp[v][j][<span class="number">0</span>]+w);       </span><br><span class="line">                        <span class="comment">//之前没有儿子节点不回来，v不回到u    </span></span><br><span class="line">                        Min(p[i+j][<span class="number">1</span>],dp[u][i][<span class="number">1</span>]+dp[v][j][<span class="number">1</span>]+<span class="number">2</span>*w);     </span><br><span class="line">                        <span class="comment">//之前没有儿子节点不回来，v直接走回到u</span></span><br><span class="line">                        Min(p[i+j+<span class="number">1</span>][<span class="number">1</span>],dp[u][i][<span class="number">1</span>]+dp[v][j][<span class="number">0</span>]+w+L);   </span><br><span class="line">                        <span class="comment">//之前没有儿子节点不回来，v最后通过捷径回到u</span></span><br><span class="line">                        Min(p[i+j+<span class="number">1</span>][<span class="number">1</span>],dp[u][i][<span class="number">0</span>] + dp[v][j][<span class="number">0</span>]+L+w);     </span><br><span class="line">                        <span class="comment">//之前有儿子节点不回来，直接走到当前儿子叶子节点走回来。</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++)&#123;</span><br><span class="line">                dp[u][i][<span class="number">0</span>] = p[i][<span class="number">0</span>];</span><br><span class="line">                dp[u][i][<span class="number">1</span>] = p[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> &amp;w,<span class="keyword">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">    w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;(<span class="keyword">int</span>)s.size() &amp;&amp; s[i]&lt;=<span class="string">'9'</span> &amp;&amp; s[i]&gt;=<span class="string">'0'</span>)&#123;</span><br><span class="line">            w = w*<span class="number">10</span> +s[i]-<span class="string">'0'</span>;</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">        i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minTime</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; roads, <span class="keyword">int</span> K, <span class="keyword">int</span> L)</span></span>&#123;</span><br><span class="line">    ::K = K;</span><br><span class="line">    ::L = L;</span><br><span class="line">    s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)roads.size();i++) s += roads[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) ev[i].clear(),ew[i].clear();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,w;</span><br><span class="line">            get(u,l);</span><br><span class="line">            get(v,l);</span><br><span class="line">            get(w,l);</span><br><span class="line">            ev[u].push_back(v);ew[u].push_back(w);</span><br><span class="line">            ev[v].push_back(u);ew[v].push_back(w);</span><br><span class="line">            <span class="keyword">if</span>(l&gt;=(<span class="keyword">int</span>)s.size()) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++) ans = min(ans,dp[<span class="number">0</span>][i][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Powered by FileEdit</span></span><br><span class="line"><span class="comment">// Powered by TZTester 1.01 [25-Feb-2003]</span></span><br><span class="line"><span class="comment">// Powered by CodeProcessor</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：给定一棵树，最多可给这棵树增加k条捷径，每条捷径长度为L，且只能走一次，问从0出发回到0遍历所有的边需要走的最短距离。&lt;/p&gt;
&lt;p&gt;树型dp，状态为dp[i][j][2]。&lt;br&gt;dp[i][j][0]表示从i出发，用了j次捷径，遍历完下面所有边且最后走的路径到底后
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>TopCoder SRM 474 DIV1 1000</title>
    <link href="http://yoursite.com/2013/08/12/TopCoder-SRM-474-DIV1-1000/"/>
    <id>http://yoursite.com/2013/08/12/TopCoder-SRM-474-DIV1-1000/</id>
    <published>2013-08-12T18:33:08.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：把一棵树对应到一张无向图上有多少种方案，即满足树上两点之间有边，那图上对应的两点之间也有边的方案。N&lt;=14</p><p>只要想到这是树型dp，这题就不难，状态为dp[i][j][mask]，表示到树上节点为i对应图上节点为j时它及子树已经用过图上节点mask的方案数。mask是状态压缩。<br>转移的时候尽量优化，否则会tle。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC(x,y) x = (x+y)%mod;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">15</span>][<span class="number">1</span>&lt;&lt;<span class="number">14</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">15</span>][<span class="number">1</span>&lt;&lt;<span class="number">14</span>];</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">20</span>][<span class="number">20</span>],t[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameWithGraphAndTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!t[u][v] || v==f) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v,u);</span><br><span class="line">            <span class="keyword">if</span>(fb == <span class="number">0</span>)&#123;</span><br><span class="line">                fb = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                        <span class="keyword">if</span>(g[i][j])</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(<span class="number">1</span>&lt;&lt;n);k++)</span><br><span class="line">                            <span class="keyword">if</span>(((k&gt;&gt;i)&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                                INC(dp[u][i][k|(<span class="number">1</span>&lt;&lt;i)],dp[v][j][k]);</span><br><span class="line">                            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                clr(p,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(<span class="number">1</span>&lt;&lt;n);k++)</span><br><span class="line">                    <span class="keyword">if</span>(((k&gt;&gt;i)&amp;<span class="number">1</span>) &amp;&amp; dp[u][i][k])</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                        <span class="keyword">if</span>(g[i][j])&#123;</span><br><span class="line">                            <span class="keyword">int</span> rt = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>-k;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> l=rt;l&gt;<span class="number">0</span>;l=(l<span class="number">-1</span>)&amp;rt)&#123;</span><br><span class="line">                                <span class="keyword">if</span>((l&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                                    INC(p[i][k|l] , dp[u][i][k] * dp[v][j][l]);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;n);j++) dp[u][i][j] = p[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fb==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) dp[u][i][<span class="number">1</span>&lt;&lt;i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; g, <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; t)</span></span>&#123;</span><br><span class="line">        n = g.size();</span><br><span class="line">        clr(dp,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(g[i][j]==<span class="string">'Y'</span>) ::g[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> ::g[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(t[i][j]==<span class="string">'Y'</span>) ::t[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> ::t[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;n);j++) ans = (ans+dp[<span class="number">0</span>][i][j])%mod;</span><br><span class="line"><span class="keyword">return</span>  ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Powered by FileEdit</span></span><br><span class="line"><span class="comment">// Powered by TZTester 1.01 [25-Feb-2003]</span></span><br><span class="line"><span class="comment">// Powered by CodeProcessor</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：把一棵树对应到一张无向图上有多少种方案，即满足树上两点之间有边，那图上对应的两点之间也有边的方案。N&amp;lt;=14&lt;/p&gt;
&lt;p&gt;只要想到这是树型dp，这题就不难，状态为dp[i][j][mask]，表示到树上节点为i对应图上节点为j时它及子树已经用过图上节点mask
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>POJ 3415 Common Substrings</title>
    <link href="http://yoursite.com/2013/08/11/POJ-3415-Common-Substrings/"/>
    <id>http://yoursite.com/2013/08/11/POJ-3415-Common-Substrings/</id>
    <published>2013-08-11T18:31:26.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：求两个串中相同的长度大于K的子串对数。</p><p>两个串链接起来做后缀数组。<br>假设height数组为：<br> 0 2 1 4 3 2 4<br> 0 0 0 1 0 0 1<br>0表示是第一个串的后缀，1表示是第二个串的后缀。<br>如果现在求第7个后缀，能与之前第一个串的后缀得到多少的长度大于k的子串对数。<br>可以发现[1,2]区间的后缀和第7个后缀最长匹配都为1，[3,5]区间的后缀最长匹配为2,[6,6]区间的最长匹配为3, 因此用单调栈找到前一个比他小的height，那么这段区间的每个后缀都能得到 heigth-k+1个与第7个后缀长度大于等于k的子串。<br>因此需要从前往后，从后往前维护两次单调栈，分别得到每个第二个串的后缀能与之前或之后第一个串的后缀匹配的个数，答案求和即可.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> ua[N], ub[N], us[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span>  <span class="comment">//da(r, sa, n + 1, 256);(r[n] = 0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=ua,*y=ub,*t;</span><br><span class="line"><span class="comment">//r[]存放原字符串,且从char变为int</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) us[i]=<span class="number">0</span>; <span class="comment">//sa[i]表示排名为i的后缀起始下标(i&gt;=1,sa[i]&gt;=0)</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) us[x[i]=r[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m; i++) us[i]+=us[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) sa[--us[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>; p&lt;n; j*=<span class="number">2</span>,m=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j; i&lt;n; i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) us[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) us[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m; i++) us[i]+=us[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) sa[--us[x[y[i]]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">            x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rank[N],height[N]; <span class="comment">//height[i]为排第i-1和第i的后缀的公共前缀长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) rank[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; height[rank[i++]]=k)</span><br><span class="line">        <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>]; r[i+k]==r[j+k]; k++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> a[N],sa[N],st[N],top;</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gao</span><span class="params">(<span class="keyword">int</span> height[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(sa[i] &lt; n)</span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>];</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    ll val = <span class="number">0</span>;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">0</span> &amp;&amp; height[i] &lt; height[st[top]])&#123;</span><br><span class="line">            <span class="keyword">int</span> x = st[top] , y = st[top<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(height[x]-k&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(y&gt;<span class="number">0</span>)</span><br><span class="line">                    val -= (sum[x<span class="number">-1</span>]-sum[y<span class="number">-1</span>])*(height[x]-k+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    val -= sum[x<span class="number">-1</span>]*(height[x]-k+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            top--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = i,y = st[top];</span><br><span class="line">        <span class="keyword">if</span>(height[x]-k&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span>(y&gt;<span class="number">0</span>)</span><br><span class="line">                val += (sum[x<span class="number">-1</span>]-sum[y<span class="number">-1</span>])*(height[x]-k+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                val += sum[x<span class="number">-1</span>]*(height[x]-k+<span class="number">1</span>);</span><br><span class="line">        st[++top] = i;</span><br><span class="line">        <span class="keyword">if</span>(sa[i]&gt;n)</span><br><span class="line">            ans += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i] = s[i];</span><br><span class="line">        a[n] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        m = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(    <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) a[i+n+<span class="number">1</span>] = s[i];</span><br><span class="line">        a[n+m+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        da(a,sa,n+m+<span class="number">2</span>,<span class="number">256</span>);</span><br><span class="line">        calheight(a,sa,n+m+<span class="number">1</span>);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        ans += gao(height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m+<span class="number">1</span>;i++) st[i] = sa[n+m+<span class="number">1</span>-i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m+<span class="number">1</span>;i++) sa[i] = st[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+m+<span class="number">1</span>;i++) st[i] = height[n+m+<span class="number">1</span>-i+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+m+<span class="number">1</span>;i++) height[i] = st[i];</span><br><span class="line"></span><br><span class="line">        ans += gao(height);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：求两个串中相同的长度大于K的子串对数。&lt;/p&gt;
&lt;p&gt;两个串链接起来做后缀数组。&lt;br&gt;假设height数组为：&lt;br&gt; 0 2 1 4 3 2 4&lt;br&gt; 0 0 0 1 0 0 1&lt;br&gt;0表示是第一个串的后缀，1表示是第二个串的后缀。&lt;br&gt;如果现在求第7个后缀
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4654 k-edge connected components</title>
    <link href="http://yoursite.com/2013/08/07/HDU-4654-k-edge-connected-components/"/>
    <id>http://yoursite.com/2013/08/07/HDU-4654-k-edge-connected-components/</id>
    <published>2013-08-07T16:44:38.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：求一个无向图中，k联通分量的个数。</p><p>迭代过程：<br>用Stoer_Wagner求出当前全局最小割，判断是否大于k，是就返回，不是就按割边把图分成两个部分继续迭代。<br>用Soter_Wagner按最小割把图分为两部分的方法：此算法一直把点合并，当合并到某一状态时，当前最小割被更新了，那么对于当前最小割 ，”prim”时最后加入的那个点及和他合并的点就是一部分，剩余的点就是另一部分，得到最小割时划分的两部分即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#define ll long long</span><br><span class="line">#define clr(a,b) memset(a,b,sizeof(a))</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 105;</span><br><span class="line"></span><br><span class="line">const int inf = 1e8;</span><br><span class="line">int g[N][N],a[N][N],p[N];</span><br><span class="line">bool vis[N],combine[N],par[N];</span><br><span class="line">int d[N],node[N],st[N],k,s,t;</span><br><span class="line">vector&lt;int&gt; vst[N];</span><br><span class="line">vector&lt;int&gt; pa,pb;</span><br><span class="line"></span><br><span class="line">int prim(int n)&#123;</span><br><span class="line">    clr(vis,0);</span><br><span class="line">    clr(d,0);</span><br><span class="line">    int mincut = 0;</span><br><span class="line">    int tmp = -1;</span><br><span class="line">    s =-1, t =-1;</span><br><span class="line">    int top = 0;</span><br><span class="line">    for(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">        int maxi = -inf;</span><br><span class="line">        for(int j=0;j&lt;k;j++)&#123;</span><br><span class="line">            int u = node[j];</span><br><span class="line">            if(!combine[u]&amp;&amp;!vis[u]&amp;&amp;d[u]&gt;maxi)&#123;</span><br><span class="line">                tmp = u;</span><br><span class="line">                maxi = d[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st[top++] = tmp;</span><br><span class="line">        vis[tmp] = true;</span><br><span class="line">        if(i==k-1)</span><br><span class="line">            mincut=d[tmp];</span><br><span class="line">        for(int j=0;j&lt;k;j++)&#123;</span><br><span class="line">            int u=node[j];</span><br><span class="line">            if(!combine[u]&amp;&amp;!vis[u])</span><br><span class="line">                d[u] += g[tmp][u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s = st[top-2];</span><br><span class="line">    t = st[top-1];</span><br><span class="line">    for(int i=0;i&lt;top;i++)  node[i] = st[i];</span><br><span class="line">    return mincut;</span><br><span class="line">&#125;</span><br><span class="line">int Stoer_Wagner(int n)&#123;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        vst[i].clear();</span><br><span class="line">        vst[i].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ans = inf;</span><br><span class="line">    clr(combine,0);</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        node[i] = i;</span><br><span class="line">    for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">        k = n-i+1;</span><br><span class="line">        int cur = prim(n);</span><br><span class="line">        if(cur&lt;ans)&#123;</span><br><span class="line">            ans =cur;</span><br><span class="line">            for(int j=0;j&lt;n;j++) par[j] = 0;</span><br><span class="line">            for(int j=0;j&lt;vst[t].size();j++)&#123;</span><br><span class="line">                par[vst[t][j]] = 1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        combine[t] = true;</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;vst[t].size();j++)&#123;</span><br><span class="line">            vst[s].push_back(vst[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">            if(j==s) continue;</span><br><span class="line">            if(!combine[j])&#123;</span><br><span class="line">                g[s][j] += g[t][j];</span><br><span class="line">                g[j][s] += g[j][t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pa.clear();pb.clear();</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        if(par[i]) pa.push_back(i);</span><br><span class="line">        else pb.push_back(i);</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int K;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int dfs(vector&lt;int&gt; t)&#123;</span><br><span class="line">    int n = t.size();</span><br><span class="line">    for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) g[i][j] = a[t[i]][t[j]];</span><br><span class="line">    if(Stoer_Wagner(n)&gt;=K) return 1;</span><br><span class="line">    vector&lt;int&gt; x,y;</span><br><span class="line">    for(int i=0;i&lt;pa.size();i++) x.push_back(t[pa[i]]);</span><br><span class="line">    for(int i=0;i&lt;pb.size();i++) y.push_back(t[pb[i]]);</span><br><span class="line">    return dfs(x) + dfs(y);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">//    freopen(&quot;/home/zyc/Documents/Code/cpp/in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">    int n,m;</span><br><span class="line">    while(scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;K)!=EOF)&#123;</span><br><span class="line">        clr(a,0);</span><br><span class="line">        for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">            int u,v;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;u,&amp;v);</span><br><span class="line">            u--;v--;</span><br><span class="line">            a[u][v] += 1;</span><br><span class="line">            a[v][u] += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; t;</span><br><span class="line">        for(int i=0;i&lt;n;i++) t.push_back(i);</span><br><span class="line">        printf(&quot;%d\n&quot;,dfs(t));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：求一个无向图中，k联通分量的个数。&lt;/p&gt;
&lt;p&gt;迭代过程：&lt;br&gt;用Stoer_Wagner求出当前全局最小割，判断是否大于k，是就返回，不是就按割边把图分成两个部分继续迭代。&lt;br&gt;用Soter_Wagner按最小割把图分为两部分的方法：此算法一直把点合并，当合并
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>suffix automation</title>
    <link href="http://yoursite.com/2013/08/06/suffix-automation/"/>
    <id>http://yoursite.com/2013/08/06/suffix-automation/</id>
    <published>2013-08-06T13:47:01.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>hdu 4622<br>题意：询问每个子串里包含的不同的子串的个数。<br>枚举每一个点作为起点做后缀自动机，维护自动机每个节点能有多少条路径到达。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch+<span class="number">1</span>],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="comment">//ch+1 number of tempt suffix at status</span></span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        chd[<span class="number">0</span>][ch] = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            sw[i+<span class="string">'a'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> c = sw[inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line">        <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            chd[x][c] = sz;</span><br><span class="line">            chd[last][ch] += chd[x][ch];</span><br><span class="line">            ans += chd[x][ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)&#123;</span><br><span class="line">            f[sz]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>)&#123;</span><br><span class="line">                f[sz]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">memcpy</span>(chd[sz],chd[y],ch*<span class="number">4</span>);</span><br><span class="line"><span class="comment">//                for(int i=0;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span></span><br><span class="line">                chd[sz][ch] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[last] = f[y] = sz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==y;x=f[x])&#123;</span><br><span class="line">                    chd[x][c] = sz;</span><br><span class="line">                    chd[y][ch] -= chd[x][ch];</span><br><span class="line">                    chd[sz][ch] += chd[x][ch];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            sam.init();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=i)</span><br><span class="line">                    g[i][j] = g[i][j<span class="number">-1</span>] + sam.add(s[j],j-i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    g[i][j] = sam.add(s[j],j-i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line">        <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            l--;r--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,g[l][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hdu 4641<br>题意：给一个串在末尾动态增加字符，询问当前串中至少出现k次的子串个数。<br>与上题相比还需要维护增加字符时，以新加入字符为串尾的串的相应节点出现次数，只要更新parent树中当前last的祖先即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch+<span class="number">2</span>],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="comment">//ch+1 number of tempt suffix at status</span></span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        chd[<span class="number">0</span>][ch] = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            sw[i+<span class="string">'a'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line">        <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            chd[x][c] = sz;</span><br><span class="line">            chd[last][ch] += chd[x][ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)&#123;</span><br><span class="line">            f[sz]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>)&#123;</span><br><span class="line">                f[sz]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span><br><span class="line">                chd[sz][ch] = <span class="number">0</span>;</span><br><span class="line">                chd[sz][ch+<span class="number">1</span>] = chd[y][ch+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[last] = f[y] = sz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==y;x=f[x])&#123;</span><br><span class="line">                    chd[x][c] = sz;</span><br><span class="line">                    chd[y][ch] -= chd[x][ch];</span><br><span class="line">                    chd[sz][ch] += chd[x][ch];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        x = last;</span><br><span class="line">        <span class="keyword">for</span>(x = last;x!=<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            <span class="keyword">if</span>(chd[x][ch+<span class="number">1</span>]&gt;=k) <span class="keyword">break</span>;</span><br><span class="line">            chd[x][ch+<span class="number">1</span>] ++;</span><br><span class="line">            <span class="keyword">if</span>(chd[x][ch+<span class="number">1</span>]==k)</span><br><span class="line">                ans += chd[x][ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        sam.init();</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            ans += sam.add(s[i],i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> type;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;type);</span><br><span class="line">            <span class="keyword">if</span>(type==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> c[<span class="number">2</span>];</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">                ans += sam.add(c[<span class="number">0</span>],++n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hdu 2609<br>题意：给你n个串，问有多少个是循环不同构。<br>可以使用最小表示法来求，后缀自动机的话先把串扩展成两倍，加进自动机，然后在自动机里求长度为原来长度的最小的串即可，需要遍历一遍。<br>最后用trie树判重。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        sw[<span class="string">'0'</span>] = <span class="number">0</span>;</span><br><span class="line">        sw[<span class="string">'1'</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line">        <span class="keyword">for</span>(;x&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x]) chd[x][c] = sz;</span><br><span class="line">        <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">        <span class="keyword">if</span>(y == <span class="number">0</span>)&#123;chd[x][c]=sz;f[sz]=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>)&#123;f[sz]=y;&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sz++;</span><br><span class="line">            len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span><br><span class="line">            f[sz] = f[y];</span><br><span class="line">            f[last] = f[y] = sz;</span><br><span class="line">            <span class="keyword">for</span>(;x&amp;&amp;chd[x][c]==y;x=f[x]) chd[x][c] = sz;</span><br><span class="line">            <span class="keyword">if</span>(chd[x][c]==y) chd[x][c] = sz;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(;x;x=f[x]) sz = sz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> dis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dis;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ch;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(chd[rt][j])&#123;</span><br><span class="line">                    s[i] = <span class="string">'0'</span> + j;</span><br><span class="line">                    rt = chd[rt][j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> trie[N][ch+<span class="number">1</span>],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        clr(trie[<span class="number">0</span>],<span class="number">-1</span>);</span><br><span class="line">        sw[<span class="string">'0'</span>] = <span class="number">0</span>;</span><br><span class="line">        sw[<span class="string">'1'</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>,nxt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++,tmp=nxt)&#123;</span><br><span class="line">            nxt = trie[tmp][sw[s[i]]];</span><br><span class="line">            <span class="keyword">if</span>(nxt==<span class="number">-1</span>)&#123;</span><br><span class="line">                top++;</span><br><span class="line">                clr(trie[top],<span class="number">-1</span>);</span><br><span class="line">                trie[tmp][sw[s[i]]] = nxt =top;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        trie[tmp][ch] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(trie[rt][i]!=<span class="number">-1</span>)</span><br><span class="line">                sum += count(trie[rt][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(trie[rt][ch]!=<span class="number">-1</span>) sum++;</span><br><span class="line">        <span class="keyword">return</span> sum ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        t.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            sam.init();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">            m = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) sam.add(s[i],i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;<span class="number">2</span>*m;i++) sam.add(s[i-m],i+<span class="number">1</span>);</span><br><span class="line">            sam.go(s,m);</span><br><span class="line">            t.insert(s,m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t.count(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>spoj NSUBSTR<br>题意：求一个串中长度为i的串最多出现的次数。<br>记录自动机每个节点到达的次数，利用parent树来做。然后利用自动机的性质得到每个节点最长到达的串，即构造时的len,然后从大到小更新一遍。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">510000</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch+<span class="number">1</span>],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            sw[i+<span class="string">'a'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line"></span><br><span class="line">        chd[last][ch]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            chd[x][c] = sz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)&#123;</span><br><span class="line">            f[sz]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>)&#123;</span><br><span class="line">                f[sz]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span><br><span class="line">                chd[sz][ch] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[last] = f[y] = sz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==y;x=f[x])&#123;</span><br><span class="line">                    chd[x][c] = sz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parent_tree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++) p[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=sz;v++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u = f[v];</span><br><span class="line">            p[u].push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs_tree(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs_tree</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[u].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = p[u][i];</span><br><span class="line">            dfs_tree(v);</span><br><span class="line">            chd[u][ch] += chd[v][ch];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    sam.init();</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        sam.add(s[i],i+<span class="number">1</span>);</span><br><span class="line">    sam.parent_tree();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sam.sz;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> l = sam.len[i];</span><br><span class="line">        <span class="keyword">int</span> w = sam.chd[i][ch];</span><br><span class="line">        a[l] = max(a[l],w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) a[i] = max(a[i+<span class="number">1</span>],a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>spoj SUBLEX<br>题意：询问一个串中第k小的不同的子串。<br>关键要得到自动机每个节点后面能够有多少种不同走法，有向无环图做下dp。然后走一遍自动机。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200000</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> q[N][ch],l[N];</span><br><span class="line">    ll dp[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(vis,<span class="number">0</span>);</span><br><span class="line">        clr(dp,<span class="number">0</span>);</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            sw[i+<span class="string">'a'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            chd[x][c] = sz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>) f[sz]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>) f[sz]=y;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[last] = f[y] = sz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==y;x=f[x])&#123;</span><br><span class="line">                    chd[x][c] = sz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> ;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        l[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = chd[u][i];</span><br><span class="line">            <span class="keyword">if</span>(v!=<span class="number">0</span>)&#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                q[u][l[u]] = i;</span><br><span class="line">                l[u] ++;</span><br><span class="line">                dp[u] += dp[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>,length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rt!=<span class="number">0</span>) k--;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l[rt];i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> nc = q[rt][i];</span><br><span class="line">                <span class="keyword">int</span> nxt = chd[rt][nc];</span><br><span class="line">                <span class="keyword">if</span>(dp[nxt]&gt;=k)&#123;</span><br><span class="line">                    rt = nxt ;</span><br><span class="line">                    s[length++] = nc+<span class="string">'a'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    k -= dp[nxt];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s[length] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">puts</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    sam.init();</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        sam.add(s[i],i+<span class="number">1</span>);</span><br><span class="line">    sam.dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        ll k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);</span><br><span class="line">        sam.go(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spoj LCS</span><br><span class="line">spoj LCS2</span><br><span class="line">这两题比较类似，求n个串的最长公共子串。</span><br><span class="line">先以第一个串构造自动机，然后每个串都在自动机上走一遍，维护每个节点所能匹配的最长的串，对于所有串每个节点取个匹配的最小值，在对所有节点取个最大值即可。</span><br><span class="line">```c++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000000</span>,ch = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> chd[N][ch],f[N],sw[<span class="number">200</span>],len[N];</span><br><span class="line">    <span class="keyword">int</span> val[N],tmp[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[N];</span><br><span class="line">    <span class="keyword">int</span> sz,last;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++)</span><br><span class="line">            sw[i+<span class="string">'a'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> tc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[(<span class="keyword">int</span>)tc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        len[last] = l;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x]) chd[x][c] = last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">-1</span>) f[last] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x] + <span class="number">1</span>) f[last] = y;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz ++;</span><br><span class="line">                <span class="built_in">memcpy</span>(chd[sz],chd[y],ch*<span class="number">4</span>);</span><br><span class="line"><span class="comment">//                for(int i=0;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span></span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[y] = f[last] =sz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(;x!=<span class="number">-1</span> &amp;&amp; chd[x][c]==y;x=f[x]) chd[x][c] = sz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++) p[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++)</span><br><span class="line">            p[f[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++) tmp[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> c = sw[(<span class="keyword">int</span>)s[i]];</span><br><span class="line">            <span class="keyword">if</span>(chd[rt][c])&#123;</span><br><span class="line">                l++;</span><br><span class="line">                rt = chd[rt][c];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(rt!=<span class="number">-1</span>&amp;&amp;chd[rt][c]==<span class="number">0</span>) rt = f[rt];</span><br><span class="line">                <span class="keyword">if</span>(rt==<span class="number">-1</span>)&#123;</span><br><span class="line">                    rt = <span class="number">0</span>;</span><br><span class="line">                    l = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    l = len[rt] + <span class="number">1</span>;</span><br><span class="line">                    rt = chd[rt][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l&gt;tmp[rt]) tmp[rt] = l;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[i] &gt; len[i]) tmp[i] = len[i];</span><br><span class="line">            <span class="keyword">if</span>(tmp[i]&lt;val[i])</span><br><span class="line">                val[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = p[u].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = p[u][i];</span><br><span class="line">            dfs(v);</span><br><span class="line">            <span class="keyword">if</span>(tmp[v]&gt;tmp[u]) tmp[u] = tmp[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++) ans = max(ans,val[i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    sam.init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) sam.add(s[i],i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sam.build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sam.sz;i++) sam.val[i] = inf;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        sam.go(s,n);</span><br><span class="line">        cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sam.get());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>bzoj 2806<br>这题比较综合<br>就说一下后缀自动机的部分：要得到一个串在某个位置往前与其他模版串所能匹配的最长长度。把模版串用’$’号串起来，建立后缀自动机。然后一开始的串走一遍就可以了。</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>    Problem: 2806<br>    User: _LT_zyc<br>    Language: C++<br>    Result: Accepted<br>    Time:1232 ms<br>    Memory:79788 kb<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="comment">//ch+1 number of tempt suffix at status</span></span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        sw[<span class="string">'0'</span>] = <span class="number">0</span>;</span><br><span class="line">        sw[<span class="string">'1'</span>] = <span class="number">1</span>;</span><br><span class="line">        sw[<span class="string">'2'</span>] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[(<span class="keyword">int</span>)inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line">        <span class="keyword">for</span>(;~x&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            chd[x][c] = sz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>) f[sz]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>)  f[sz]=y;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">                <span class="built_in">memcpy</span>(chd[sz],chd[y],<span class="keyword">sizeof</span>(chd[sz]));</span><br><span class="line"> </span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[last] = f[y] = sz;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">for</span>(;~x&amp;&amp;chd[x][c]==y;x=f[x])&#123;</span><br><span class="line">                    chd[x][c] = sz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> n,<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> c = sw[(<span class="keyword">int</span>)s[i]];</span><br><span class="line">            <span class="keyword">if</span>(chd[rt][c])&#123;</span><br><span class="line">                l++;</span><br><span class="line">                rt=chd[rt][c];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(~rt&amp;&amp;chd[rt][c]==<span class="number">0</span>) rt=f[rt];</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span>(rt==<span class="number">-1</span>)&#123;</span><br><span class="line">                    rt=<span class="number">0</span>;</span><br><span class="line">                    l=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    l=len[rt]+<span class="number">1</span>;</span><br><span class="line">                    rt=chd[rt][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i] = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1200000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">1200000</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1200000</span>],len;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">1200000</span>],qid[<span class="number">1200000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> gap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>) dp[i] = dp[i<span class="number">-1</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> x = i-a[i];</span><br><span class="line">        <span class="keyword">while</span>(r&gt;l&amp;&amp;qid[l]&lt;x) l++;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=gap)&#123;</span><br><span class="line">            dp[i] = max(dp[i],a[i]);</span><br><span class="line">            <span class="keyword">if</span>(r&gt;l) dp[i] = max(dp[i],q[l]+i);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        x = i-gap+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> w= dp[x]-x;</span><br><span class="line">            <span class="keyword">while</span>(r&gt;l&amp;&amp;w&gt;=q[r<span class="number">-1</span>]) r--;</span><br><span class="line">            qid[r] = x;</span><br><span class="line">            q[r++] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]*<span class="number">10</span> &gt;= len*<span class="number">9</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    sam.init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">            sam.add(<span class="string">'2'</span>,++len);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line">            sam.add(s[j],++len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        sam.go(s,len,a);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=len;</span><br><span class="line">        <span class="keyword">while</span>(r!=l)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(get(mid)) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hdu 4436<br>题意：给你多个由0~9组成的字符串，问其中所有子串代表的不同的数字的和。<br>位数高的在前面，所以先把串反过来，让位数高的后加进自动机。<br>多个串要判重所以先用’$’连接起来，建立自动机。<br>要得到每个节点后面的其他节点的值以及出现次数，然后当前节点的值就是 dp[u]  = dp[v] <em>10 + i</em>p[v];(i为转移的数字，p[v]为出现次数)，还是dag上的dp<br>注意要把i=0的情况处理好。<br>答案就是dp[0]。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:65536000"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">2012</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">int</span> chd[N][ch],len[N],sw[<span class="number">200</span>],f[N];</span><br><span class="line">    <span class="keyword">int</span> sz,last,dp[N],vis[N],p[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd,<span class="number">0</span>);</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        len[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        sw[<span class="string">'$'</span>] = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">            sw[i+<span class="string">'0'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> tc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sw[(<span class="keyword">int</span>)tc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;~x&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x]) chd[x][c] = sz;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">-1</span>) f[sz] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x] + <span class="number">1</span>) f[sz] = y;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                <span class="built_in">memcpy</span>(chd[sz],chd[y],<span class="keyword">sizeof</span>(chd[sz]));</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[y] = f[last] =sz;</span><br><span class="line">                <span class="keyword">for</span>(;~x&amp;&amp;chd[x][c]==y;x=f[x]) chd[x][c] = sz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> ;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = chd[u][i];</span><br><span class="line">            <span class="keyword">if</span>(v)&#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    p[u]+=p[v];</span><br><span class="line">                    <span class="keyword">if</span>(p[u]&gt;=mod) p[u]%=mod;</span><br><span class="line">                    dp[u] += dp[v] * <span class="number">10</span> +i*p[v];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p[u]+=p[v]+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(p[u]&gt;=mod) p[u]%=mod;</span><br><span class="line">                    dp[u] += dp[v] * <span class="number">10</span> +i*(p[v]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dp[u]&gt;=mod) dp[u] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sz;i++) p[i] = dp[i] =vis[i]= <span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        sam.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">            <span class="keyword">int</span> m = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m/<span class="number">2</span>;j++) swap(s[j],s[m-j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>) sam.add(<span class="string">'$'</span>,++len);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) sam.add(s[j],++len);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += sam.go();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>spoj COT4<br>看了一眼别人的做法，只能说我没打过ACM。有空在写。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hdu 4622&lt;br&gt;题意：询问每个子串里包含的不同的子串的个数。&lt;br&gt;枚举每一个点作为起点做后缀自动机，维护自动机每个节点能有多少条路径到达。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4622 Reincarnation</title>
    <link href="http://yoursite.com/2013/07/31/HDU-4622-Reincarnation/"/>
    <id>http://yoursite.com/2013/07/31/HDU-4622-Reincarnation/</id>
    <published>2013-07-31T17:02:00.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意： 长度为2000的串，10000个询问：[l,r]这个子串包含多少不同的子串。</p><p>比赛时用的后缀数组o(n<em>Q) ，赛后用的hash o(n</em>n*log(n)) 和后缀自动机，这个log的出现是因为hash写不来 = = .</p><p>后缀数组解发：<br>先对原来的串做一遍后缀数组，对于每个询问,对sa数组进行扫描，如果当前前缀在[l,r]范围内，就找到之前和他公共前缀最长且也在[l,r]范围内的串，lcp最长公共前缀，答案加上 串在当前询问中的长度减去最长公共前缀。<br>值得注意的是和当前串公共前缀最长的并不就是上一次在[l,r]范围内的串，也有可能是再之前，原因是询问的区间，相当于给每个串截断了一部分，所以区间里sa数组不再代表这区间里的串的排名，处理比较容易，见代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a));</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> ua[N],ub[N],us[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=ua,*y=ub,*t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)us[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)us[x[i]=r[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++)us[i]+=us[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--us[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,m=p)&#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++)y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(sa[i]&gt;=j)y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)us[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)us[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++)us[i]+=us[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--us[x[y[i]]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rank[N],height[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)rank[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rank[i++]]=k)</span><br><span class="line">        <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *RMQ=height;</span><br><span class="line"><span class="keyword">int</span> mm[N];</span><br><span class="line"><span class="keyword">int</span> best[<span class="number">20</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,a,b;</span><br><span class="line">    <span class="keyword">for</span>(mm[<span class="number">0</span>]=<span class="number">-1</span>,i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        mm[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>)?mm[i<span class="number">-1</span>]+<span class="number">1</span>:mm[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)best[<span class="number">0</span>][i]=i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mm[n];i++)<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;i);j++)&#123;</span><br><span class="line">        a=best[i<span class="number">-1</span>][j];</span><br><span class="line">        b=best[i<span class="number">-1</span>][j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))];</span><br><span class="line">        <span class="keyword">if</span>(RMQ[a]&lt;RMQ[b])best[i][j]=a;</span><br><span class="line">        <span class="keyword">else</span> best[i][j]=b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">askRMQ</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t=mm[b-a+<span class="number">1</span>];b-=(<span class="number">1</span>&lt;&lt;t)<span class="number">-1</span>;</span><br><span class="line">    a=best[t][a];b=best[t][b];</span><br><span class="line">    <span class="keyword">return</span> RMQ[a]&lt;RMQ[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    a=rank[a],b=rank[b];</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;t=a;a=b;b=t;&#125;</span><br><span class="line">    <span class="keyword">return</span> height[askRMQ(a+<span class="number">1</span>,b)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t,r[N],m,len[N],sa[N];</span><br><span class="line"><span class="keyword">char</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/axorb/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">            r[i]=a[i];</span><br><span class="line">            len[i]=l-i;</span><br><span class="line">        &#125;</span><br><span class="line">        r[l]=<span class="number">0</span>;len[l]=<span class="number">0</span>;</span><br><span class="line">        da(r,sa,l+<span class="number">1</span>,<span class="number">256</span>);</span><br><span class="line">        calheight(r,sa,l);</span><br><span class="line">        initRMQ(l);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> q,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q,&amp;w);</span><br><span class="line">            q--,w--;</span><br><span class="line">            <span class="keyword">int</span> o=w-q+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> last=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">0</span>;i&lt;=l&amp;&amp;p&lt;o;i++)<span class="keyword">if</span>(sa[i]&gt;=q&amp;&amp;sa[i]&lt;=w)&#123;</span><br><span class="line">                p++;</span><br><span class="line">                <span class="keyword">if</span>(last==<span class="number">-1</span>)ans+=min(len[sa[i]],w-sa[i]+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> h=min(lcp(sa[i],sa[last]),w-sa[last]+<span class="number">1</span>);</span><br><span class="line">                    ans+=min(len[sa[i]],w-sa[i]+<span class="number">1</span>)-min(h,w-sa[i]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(last!=<span class="number">-1</span>&amp;&amp;w-sa[last]+<span class="number">1</span> &gt; w-sa[i]+<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> he = lcp(sa[last],sa[i]);</span><br><span class="line">                    <span class="keyword">if</span>(he &gt;= w-sa[i]+<span class="number">1</span>) last = last;</span><br><span class="line">                    <span class="keyword">else</span> last = i;</span><br><span class="line">                &#125;                                    <span class="comment">//维护之前公共前缀最长的串，只要判断当前串是否是last的前缀，是last不变，不是last就为i</span></span><br><span class="line">                <span class="keyword">else</span> last = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash解法：<br>用hash把所有相同的子串放在一起，[l1,r1]  [l2,r2]。。。现在对于每一个询问，只把这个串第一次出现的算是这个询问的也就是询问[L，R]， 满足 l1&lt;L&lt;=l2 ,R&gt;=r2时[l2,r2]算给他。<br>然后利用扫描线和部分和维护，对于子串[l2,r2]  ，g[r2][l1+1] 加1 , g[r2][l2+1]减1，对于所有r，从左到右求一遍部分和，再从上到下求一遍部分和，g[r][l]就是询问l,r的答案了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker, "/STACK:65536000")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a));</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20005</span>];</span><br><span class="line">uint hash[<span class="number">2100</span>],w[<span class="number">2005</span>][<span class="number">2005</span>];;</span><br><span class="line">uint seed = <span class="number">131</span>;</span><br><span class="line">pair&lt;<span class="keyword">short</span>,<span class="keyword">short</span>&gt; a[<span class="number">2100</span>];</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(uint val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span> , r = m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(hash[mid] &lt; val) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hash[l] == val) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            uint val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">                val = val*seed + s[j];</span><br><span class="line">                w[i][j] = (val &amp; <span class="number">0x7FFFFFFF</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) g[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=n;d++)&#123;</span><br><span class="line">            m = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-d+<span class="number">1</span>;i++)</span><br><span class="line">                hash[m++] = w[i][i+d<span class="number">-1</span>];</span><br><span class="line">            sort(hash,hash+m);</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(hash[i] != hash[l<span class="number">-1</span>])</span><br><span class="line">                    hash[l++] = hash[i];</span><br><span class="line">            &#125;</span><br><span class="line">            m = l;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) a[i] = make_pair(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-d+<span class="number">1</span>;i++)&#123;</span><br><span class="line">                uint val = w[i][i+d<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">int</span> p = search(val);</span><br><span class="line">                <span class="keyword">int</span> r = i+d<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> l1,l2;</span><br><span class="line">                <span class="keyword">if</span>(a[p].first == <span class="number">-1</span>) l1 = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l1 = a[p].first;</span><br><span class="line">                l1++;</span><br><span class="line">                l2 = i;</span><br><span class="line">                g[r][l1]++;</span><br><span class="line">                g[r][l2+<span class="number">1</span>] --;</span><br><span class="line">                a[p] = make_pair(i,i+d<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">                g[i][j] += g[i][j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">                g[i][j] += g[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">int</span> Q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line">        <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            r--;</span><br><span class="line">            l--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,g[r][l]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后缀自动机：预处理，解法不多说。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpr(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[N],chd[N][ch+<span class="number">1</span>],len[N],sw[<span class="number">200</span>];</span><br><span class="line">    <span class="comment">//ch+1 number of tempt suffix at status</span></span><br><span class="line">    <span class="keyword">int</span> last,sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clr(chd[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        chd[<span class="number">0</span>][ch] = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            sw[i+<span class="string">'a'</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> inc,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> c = sw[inc];</span><br><span class="line">        <span class="keyword">int</span> x = last;</span><br><span class="line">        last = ++sz;</span><br><span class="line">        clr(chd[sz],<span class="number">0</span>);</span><br><span class="line">        len[sz] = l;</span><br><span class="line">        <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==<span class="number">0</span>;x=f[x])&#123;</span><br><span class="line">            chd[x][c] = sz;</span><br><span class="line">            chd[last][ch] += chd[x][ch];</span><br><span class="line">            ans += chd[x][ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)&#123;</span><br><span class="line">            f[sz]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> y = chd[x][c];</span><br><span class="line">            <span class="keyword">if</span>(len[y] == len[x]+<span class="number">1</span>)&#123;</span><br><span class="line">                f[sz]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sz++;</span><br><span class="line">                len[sz] = len[x] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ch;i++) chd[sz][i] = chd[y][i];</span><br><span class="line">                chd[sz][ch] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                f[sz] = f[y];</span><br><span class="line">                f[last] = f[y] = sz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(;x!=<span class="number">-1</span>&amp;&amp;chd[x][c]==y;x=f[x])&#123;</span><br><span class="line">                    chd[x][c] = sz;</span><br><span class="line">                    chd[y][ch] -= chd[x][ch];</span><br><span class="line">                    chd[sz][ch] += chd[x][ch];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            sam.init();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=i)</span><br><span class="line">                    g[i][j] = g[i][j<span class="number">-1</span>] + sam.add(s[j],j-i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    g[i][j] = sam.add(s[j],j-i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line">        <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            l--;r--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,g[l][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意： 长度为2000的串，10000个询问：[l,r]这个子串包含多少不同的子串。&lt;/p&gt;
&lt;p&gt;比赛时用的后缀数组o(n&lt;em&gt;Q) ，赛后用的hash o(n&lt;/em&gt;n*log(n)) 和后缀自动机，这个log的出现是因为hash写不来 = = .&lt;/p&gt;
&lt;p&gt;后
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 316G3Good Substrings (30 points)</title>
    <link href="http://yoursite.com/2013/07/30/Codeforces-316G3Good-Substrings-30-points/"/>
    <id>http://yoursite.com/2013/07/30/Codeforces-316G3Good-Substrings-30-points/</id>
    <published>2013-07-31T03:00:49.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：给一个长为50000的字符串t，还有10个约束(p,l,r), 当某一字符串s在p中出现的次数大于等于l,小于等于r时满足约束，问t有多少个不同的子串满足所有约束。</p><p>先考虑t的子串的性质：<br>t 的长度为len<br>假设以 x 为起点的子串，终点在[l,len]范围内时满足所有约束条件中的小于部分。<br>那么对于以x+1为起点的子串，终点在[l1,len]范围内时满足所有约束条件中的小于部分<br>则有  l1 &gt; l ，所以用 two point 先行扫描出l[0]~l[len-1] 。其中扫描过程中如何判断某一子串在约束串中出现的次数，用二分+后缀数组。<br>同样处理出 r[0]~r[len-1] 满足范围内时满足所有约束条件中的大于部分<br>那么对于x为起点的串，终点在l[x]~r[x]之间时满足所有约束条件。<br>还没结束，还需要判重，后缀数组再次登程。<br>我们需要找到以x为起点的串，在(0,x-1)为起点的串中出现过的次数，转换一下可以变成求x为起点的串与之前串最多能匹配到多长，记录为repl[x]，从前从后扫各一遍sa数组，用树状数组和后缀数组的lcp来搞。<br>答案就是对 r[i]-max(repl[i],l[i])+1 (0&lt;=i&lt;len) 求和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forn(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> X = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> ua[N], ub[N], us[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> n,len[X],l[X],r[X];</span><br><span class="line"><span class="keyword">int</span> ansl[N],ansr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span>  <span class="comment">//da(r, sa, n + 1, 256);(r[n] = 0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=ua,*y=ub,*t;</span><br><span class="line"><span class="comment">//r[]存放原字符串,且从char变为int</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) us[i]=<span class="number">0</span>; <span class="comment">//sa[i]表示排名为i的后缀起始下标(i&gt;=1,sa[i]&gt;=0)</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) us[x[i]=r[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m; i++) us[i]+=us[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) sa[--us[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>; p&lt;n; j*=<span class="number">2</span>,m=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j; i&lt;n; i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) us[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) us[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m; i++) us[i]+=us[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) sa[--us[x[y[i]]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">            x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rank[X][N],height[X][N],sa[X][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> height[],<span class="keyword">int</span> rank[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) rank[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; height[rank[i++]]=k)</span><br><span class="line">        <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>]; r[i+k]==r[j+k]; k++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mm[N];</span><br><span class="line"><span class="keyword">int</span> best[X][<span class="number">20</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> best[<span class="number">20</span>][N],<span class="keyword">int</span> *RMQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,a,b;</span><br><span class="line">    <span class="keyword">for</span>(mm[<span class="number">0</span>]=<span class="number">-1</span>,i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        mm[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>)?mm[i<span class="number">-1</span>]+<span class="number">1</span>:mm[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) best[<span class="number">0</span>][i]=i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=mm[n]; i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;i); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a=best[i<span class="number">-1</span>][j];</span><br><span class="line">            b=best[i<span class="number">-1</span>][j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))];</span><br><span class="line">            <span class="keyword">if</span>(RMQ[a]&lt;RMQ[b]) best[i][j]=a;</span><br><span class="line">            <span class="keyword">else</span> best[i][j]=b;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">askRMQ</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> best[<span class="number">20</span>][N],<span class="keyword">int</span> *RMQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t=mm[b-a+<span class="number">1</span>];</span><br><span class="line">    b-=(<span class="number">1</span>&lt;&lt;t)<span class="number">-1</span>;</span><br><span class="line">    a=best[t][a];</span><br><span class="line">    b=best[t][b];</span><br><span class="line">    <span class="keyword">return</span> RMQ[a]&lt;RMQ[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b ,<span class="keyword">int</span> x,<span class="keyword">int</span> rank[])</span>  <span class="comment">//后缀r[a]和r[b]的公共前缀长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    a=rank[a];</span><br><span class="line">    b=rank[b];</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        t=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(height[x][askRMQ(a+<span class="number">1</span>,b,best[x],height[x])]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> type , <span class="keyword">int</span> pos,<span class="keyword">int</span> x ,<span class="keyword">int</span> <span class="built_in">strlen</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="number">0</span>) l=<span class="number">1</span>,r=rank[x][pos];</span><br><span class="line">    <span class="keyword">else</span> l=rank[x][pos],r=len[x];</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(lcp(sa[x][mid],pos,x,rank[x])&gt;=<span class="built_in">strlen</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="number">0</span>) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="number">0</span>) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lcp(sa[x][l],pos,x,rank[x])&gt;=<span class="built_in">strlen</span>) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(lcp(sa[x][r],pos,x,rank[x])&gt;=<span class="built_in">strlen</span>) <span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNum</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">strlen</span> = t - s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> up0 , down0 ,up1,down1;</span><br><span class="line">    up0 = binary_search(<span class="number">0</span>,s,<span class="number">0</span>,<span class="built_in">strlen</span>);</span><br><span class="line">    down0 = binary_search(<span class="number">1</span>,s,<span class="number">0</span>,<span class="built_in">strlen</span>);</span><br><span class="line"></span><br><span class="line">    up1 = binary_search(<span class="number">0</span>,s,x,<span class="built_in">strlen</span>);</span><br><span class="line">    down1 = binary_search(<span class="number">1</span>,s,x,<span class="built_in">strlen</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> down1-up1+<span class="number">1</span> - (down0-up0+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> repl[N];</span><br><span class="line"><span class="keyword">int</span> idx[N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> v,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=len[<span class="number">0</span>];i+=lowbit(i))</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">0</span>) idx[i] = max(idx[i],v);</span><br><span class="line">        <span class="keyword">else</span> idx[i] = min(idx[i],v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans ;</span><br><span class="line">    <span class="keyword">if</span>(type==<span class="number">0</span>) ans = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">else</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&gt;=<span class="number">1</span>;i-=lowbit(i))&#123;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">0</span>) ans = max(idx[i],ans);</span><br><span class="line">        <span class="keyword">else</span> ans = min(idx[i],ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    len[<span class="number">0</span>] = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s[i] ;</span><br><span class="line">    da(a,sa[<span class="number">0</span>],len[<span class="number">0</span>]+<span class="number">1</span>,<span class="number">300</span>);</span><br><span class="line">    calheight(a,sa[<span class="number">0</span>],len[<span class="number">0</span>],height[<span class="number">0</span>],rank[<span class="number">0</span>]);</span><br><span class="line">    initRMQ(len[<span class="number">0</span>],best[<span class="number">0</span>],height[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> tlen = <span class="built_in">strlen</span>(s);</span><br><span class="line">        a[len[<span class="number">0</span>]] = <span class="string">'$'</span>;</span><br><span class="line">        len[i] = len[<span class="number">0</span>] + tlen+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=len[<span class="number">0</span>]+<span class="number">1</span>; j&lt;len[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[j] = s[j-len[<span class="number">0</span>]<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        a[len[i]] = <span class="number">0</span>;</span><br><span class="line">        da(a,sa[i],len[i]+<span class="number">1</span>,<span class="number">300</span>);</span><br><span class="line">        calheight(a,sa[i],len[i],height[i],rank[i]);</span><br><span class="line">        initRMQ(len[i],best[i],height[i]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = max(i,p);</span><br><span class="line">        <span class="keyword">while</span>(p&lt;len[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(getNum(i,p,j)&gt;r[j])</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) p++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ansl[i] = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = max(i,p);</span><br><span class="line">        <span class="keyword">while</span>(p&lt;len[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(getNum(i,p,j) &lt; l[j])</span><br><span class="line">                    flag =<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) p++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ansr[i] = p<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len[<span class="number">0</span>];i++) repl[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len[<span class="number">0</span>];i++) idx[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sa[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">int</span> s = get(t+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(s!=<span class="number">0</span>)</span><br><span class="line">            repl[t] = lcp(t,sa[<span class="number">0</span>][s],<span class="number">0</span>,rank[<span class="number">0</span>]);</span><br><span class="line">        insert(t+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len[<span class="number">0</span>];i++) idx[i] = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sa[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">int</span> s = get(t+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(s!=inf)</span><br><span class="line">            repl[t] = max(repl[t],lcp(t,sa[<span class="number">0</span>][s],<span class="number">0</span>,rank[<span class="number">0</span>]));</span><br><span class="line">        insert(t+<span class="number">1</span>,i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ansl[i] = max(ansl[i],repl[i]+i);</span><br><span class="line">        <span class="keyword">if</span>(ansr[i]&gt;=ansl[i])</span><br><span class="line">            ans += ansr[i] - ansl[i] +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：给一个长为50000的字符串t，还有10个约束(p,l,r), 当某一字符串s在p中出现的次数大于等于l,小于等于r时满足约束，问t有多少个不同的子串满足所有约束。&lt;/p&gt;
&lt;p&gt;先考虑t的子串的性质：&lt;br&gt;t 的长度为len&lt;br&gt;假设以 x 为起点的子串，终点在
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>URAL 1956 Fire Signals</title>
    <link href="http://yoursite.com/2013/07/24/URAL-1956-Fire-Signals/"/>
    <id>http://yoursite.com/2013/07/24/URAL-1956-Fire-Signals/</id>
    <published>2013-07-24T17:21:56.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>题意：<br>求一条直线满足，所有平面上点到这条直线的距离之和最小，点数n&lt;1000，输出最小的距离纸盒之和。</p><p>经过长时间的YY，得出经过平面上的两个点的直线包含最优解。可以由  dis = |a<em>x+b</em>y+c|/sqrt(a<em>a+b</em>b) 得到。<br>因为在直线一侧的点 dis 的正负号是相同的，可以利用这一点。先枚举一点，另外的点按到这点的角度排序，然后扫描枚举另一点，维护两边的点的x之和，y之和，用abs(sum(a<em>x0+b</em>y0+c) -abs(a<em>x1+b</em>y1+c))/sqrt(a<em>a+b</em>b）  跟新答案，x0,y0是直线一边点的x,y的和,x1,y1是另一边的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pii = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> ans = <span class="number">1e20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll x[<span class="number">1005</span>],y[<span class="number">1005</span>],mx,my;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">item</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> k;</span><br><span class="line">    ll x,y;</span><br><span class="line">    item()&#123;&#125;</span><br><span class="line">    item(<span class="keyword">double</span> k,ll x,ll y):k(k),x(x),y(y)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> item b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k&lt;b.k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(a-b)&lt;<span class="number">1e-8</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ds = p[s].k;</span><br><span class="line">    <span class="keyword">double</span> dt = p[t].k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s&lt;=t) <span class="keyword">return</span> dt-ds;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dt-ds+<span class="number">2</span>*pii;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,ll sx,ll sy)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(a,<span class="number">0</span>) &amp;&amp; dcmp(b,<span class="number">0</span>)) <span class="keyword">return</span> <span class="number">1e18</span>;</span><br><span class="line">    ll tx = sx - (mx - sx);</span><br><span class="line">    ll ty = sy - (my - sy);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(a*tx+b*ty)/<span class="built_in">sqrt</span>(a*a+b*b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("/home/zyc/Documents/Code/cpp/in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(x[i]!=x[j]||y[i]!=y[j])</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        mx = <span class="number">0</span>;</span><br><span class="line">        my = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            ll nx = x[j] - x[i];</span><br><span class="line">            ll ny = y[j] - y[i];</span><br><span class="line">            mx += nx;</span><br><span class="line">            my += ny;</span><br><span class="line">            <span class="keyword">double</span> nk = <span class="built_in">atan2</span>(ny,nx);</span><br><span class="line">            p[j] = item(nk,nx,ny);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p,p+n);</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        ll sx=<span class="number">0</span>,sy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(dis(<span class="number">0</span>,r) &lt;= pii)&#123;</span><br><span class="line">            sx += p[r].x;</span><br><span class="line">            sy += p[r].y;</span><br><span class="line">            r = (r+<span class="number">1</span>)%n;</span><br><span class="line">            <span class="keyword">if</span>(r==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;n;l++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(dis(l,r)&lt;=pii)&#123;</span><br><span class="line">                    sx += p[r].x;</span><br><span class="line">                    sy += p[r].y;</span><br><span class="line">                    r =(r+<span class="number">1</span>)%n;</span><br><span class="line">                    <span class="keyword">if</span>(r==l) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ans = min(ans,get(-p[l].y,p[l].x,sx,sy));</span><br><span class="line">            sx -= p[l].x;</span><br><span class="line">            sy -= p[l].y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;br&gt;求一条直线满足，所有平面上点到这条直线的距离之和最小，点数n&amp;lt;1000，输出最小的距离纸盒之和。&lt;/p&gt;
&lt;p&gt;经过长时间的YY，得出经过平面上的两个点的直线包含最优解。可以由  dis = |a&lt;em&gt;x+b&lt;/em&gt;y+c|/sqrt(a&lt;em&gt;a+
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title> A Contest to Celebrate Girlfriend&#39;s Birthday by Staginner</title>
    <link href="http://yoursite.com/2013/07/16/A-Contest-to-Celebrate-Girlfriend-s-Birthday-by-Staginner/"/>
    <id>http://yoursite.com/2013/07/16/A-Contest-to-Celebrate-Girlfriend-s-Birthday-by-Staginner/</id>
    <published>2013-07-17T02:25:05.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>####Cut the rope II</p><p>题意：把长度为L的线段进行分割，分割后每一段都不相同的方案数。L&lt;=50000</p><p>dp比较赞，可以发现因为每一段都不相同所以 至多会有 x段，x*(x+1)/2 = L。x最大值在320左右。<br>dp[i][j][k]  i&lt;=320,j&lt;=50000 k&lt;2<br>k=0 表示现有i段用掉j的长度时不存在长度为1的段的方案数。<br>k=1 表示现有i段用掉j的长度时存在长度为1的段的方案数。</p><p>转移：dp[i][j][0] = dp[i][j-i][0] + dp[i][j-i][1];  表示当前每一段长度都加1<br>  dp[i][j][1] = dp[i-1][j-1][0]; 表示新增一段长度为1的<br>复杂度320*50000</p><p>####Shortest path</p><p>题意：求从1到n边长度严格递增的最短路。</p><p>解法1：</p><p>把边按长度排序后，长度相同的一组一组加入，然后来更新相应的点。</p><p>解法2：</p><p>这个方法比较麻烦。<br>重建图：每一条无向边先拆成两条有向的，然后把每条边的两个端点当做新的节点。<br>对于那些原来是同一个节点的新节点，按边的长度再按边先出后入得原则排序，保证前面的节点一定能更新后面的节点，然后在相邻两个之间连一条长度为0的有向边，做最短路即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####Cut the rope II&lt;/p&gt;
&lt;p&gt;题意：把长度为L的线段进行分割，分割后每一段都不相同的方案数。L&amp;lt;=50000&lt;/p&gt;
&lt;p&gt;dp比较赞，可以发现因为每一段都不相同所以 至多会有 x段，x*(x+1)/2 = L。x最大值在320左右。&lt;br&gt;d
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces MemSQL start[c]up Round 1</title>
    <link href="http://yoursite.com/2013/07/15/Codeforces-MemSQL-start-c-up-Round-1/"/>
    <id>http://yoursite.com/2013/07/15/Codeforces-MemSQL-start-c-up-Round-1/</id>
    <published>2013-07-15T23:35:14.000Z</published>
    <updated>2018-04-24T03:13:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>####A    Square and Rectangles</p><p>题意：给定5个不重叠的长方形，问是否组合成一个正方形。x,y范围10^5</p><p>先得到x，y的最大最小值<br>然后在这个范围内枚举 x ，判断每一个x的位置y是否完全覆盖，由于不相交，直接把包含这个x的长方形的y差值相加，判断是否和y最大值和最小值的差值相等。<br>trick: 漏判 x和y最大值和最小值的差值是否相等。</p><p>####B    Stadium and Games</p><p>题意：给定n，求x，满足 x/2+x/4+x/8+..y + y*(y-1)/2。y为奇数，</p><p>枚举前面项数，不会超过61项，然后二分枚举y即可。</p><p>####C    Monsters and Diamonds</p><p>题意：给定n个物品，每个物品能有至少一种拆分方式，拆分得到多个物品和至少1个钻石，求拆每一个物品直到不能拆为止得到的最少和最多钻石数量，无法拆完输出-1，可以得到无限多输出-2。</p><p>由于求得到最多钻石数量情况比求最少要多，先讨论求最少。<br>最短路，新增一个起点，起点的边为只拆分出钻石的拆分方案，u更新v时，找到u是拆分出来物品的拆分方案，比较此拆分方案的原物品v的值和拆分方案的值，更新原物品最小值以及v最为拆分出来物品的拆分方案。最后，无法到达的点即为无法拆完的物品。</p><p>求最大值dfs，那些最小值求出来为-1的点最大值也一定是-1，此外dfs到有拆分出来物品是可得到无线多时，自身也可得到无限多，dfs到环也是无限多，此外取拆分方案中最大的即可。</p><p>####325D    Reclamation</p><p>题意：一个r<em>c的图，最左和最右是相邻的，原本没有障碍，现在一步步开始增加障碍，假如当前增加的障碍使从最上到最下不存在一条路经，则该障碍无法增加，问最后增加了几个障碍。r,c&lt;=3000 障碍&lt;=3</em>10^5</p><p>无法从最上走到最下，障碍一定形成了一条环形回路。<br>把图扩展成r<em>2</em>c,   增加(i,j)这个障碍时，同时增加（i,j+c），  假设从(i,j)到（i,j+c）存在一条路经，那就能表示有一条环形回路，判断存在路径使用并查集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####A    Square and Rectangles&lt;/p&gt;
&lt;p&gt;题意：给定5个不重叠的长方形，问是否组合成一个正方形。x,y范围10^5&lt;/p&gt;
&lt;p&gt;先得到x，y的最大最小值&lt;br&gt;然后在这个范围内枚举 x ，判断每一个x的位置y是否完全覆盖，由于不相交，直接
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
</feed>
